version: "3"

services:

  proxy:
    image: traefik:${TRAEFIK_TAG-2.8}
    ports:
      - "80:80"
      # - "443:443"
      - "8080:8080"
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    restart: "always"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/certs:ro
    command:
      - --accesslog
      - --log
      - --api
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `${TRAEFIK_CONSTRAINT_TAG?Variable not set}`)
      - --providers.docker.exposedbydefault=false
      # - --providers.docker.swarmmode
      - --entrypoints.web.address=:80
      # - --entrypoints.websecure.address=:443
      # - --certificatesresolvers.sslcerts.acme.httpchallenge=true
      # - --certificatesresolvers.sslcerts.acme.httpchallenge.entrypoint=web
      # - --certificatesresolvers.sslcerts.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      # - --certificatesresolvers.sslcerts.acme.email=${FIRST_SUPERUSER?Certificate resolver requires a valid email}
      # - --certificatesresolvers.sslcerts.acme.storage=/certs/acme.json
    labels:
      - traefik.enable=true
      - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - traefik.constraint-label=${TRAEFIK_CONSTRAINT_TAG?Variable not set}
      - traefik.http.services.traefik-public.loadbalancer.server.port=80
      - traefik.http.routers.traefik-public.rule=PathPrefix(`/`)
      - traefik.http.routers.traefik-public.entrypoints=web
      # - traefik.http.routers.traefik-public.tls.certresolver=sslcerts

  whoami:
    image: emilevauge/whoami
    labels:
      - traefik.enable=true
      - traefik.constraint-label=${TRAEFIK_CONSTRAINT_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-whoami.rule=Host(`whoami.${DOMAIN?Variable not set}`)

  db:
    image: mariadb:10
    env_file: .env
    ports:
      - "3306:3306"
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    restart: "unless-stopped"
    environment:
      - MYSQL_HOST=${DATABASE_SERVER}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DATABASE_NAME}
      - MYSQL_USER=${DATABASE_USER}
      - MYSQL_PASSWORD=${DATABASE_PASSWORD}
      - MYSQL_DB_NAME=${DATABASE_NAME}
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
      timeout: 10s
      retries: 5
    volumes:
      - ./config/sql/privileges.sql:/docker-entrypoint-initdb.d/1.sql
      - app_db_data:/var/lib/mysql

  backend:
    image: '${DOCKER_IMAGE_PREFIX}/backend:${TAG-latest}'
    env_file: .env
    ports:
      - "8888:8888"
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    restart: "on-failure"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SMTP_HOST=${SMTP_HOST}
      - CELERY_WORKER_BROKER=${CELERY_WORKER_BROKER}
      - CELERY_WORKER_BACKEND=${CELERY_WORKER_BACKEND}
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
    labels:
      - traefik.enable=true
      - traefik.constraint-label=${TRAEFIK_CONSTRAINT_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
      # - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.tls.certresolver=sslcerts

  # frontend:
  #   image: '${DOCKER_IMAGE_PREFIX}/frontend:${TAG-latest}'
  #   env_file: .env
  #   ports:
  #     - "3333:3000"
  #   networks:
  #     - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
  #     - default
  #   build:
  #     context: ./frontend
  #     dockerfile: frontend.dockerfile
  #     args:
  #       INSTALL_DEV: ${INSTALL_DEV-true}
  #   labels:
  #     - traefik.enable=true
  #     - traefik.constraint-label=${TRAEFIK_CONSTRAINT_TAG?Variable not set}
  #     - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=Host(`${DOMAIN?Variable not set}`)
  #     - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.entrypoints=web
  #     # - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.tls.certresolver=sslcerts

volumes:
  app_db_data:
    driver: local

networks:
  traffic_public:
    external: ${TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL-false}
