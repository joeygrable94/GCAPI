version: "3"

services:

  proxy:
    image: traefik:${TRAEFIK_TAG-2.8}
    ports:
      - "80:80"
      # - "443:443"
      - "8080:8080"
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    restart: "always"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/certs:ro
    command:
      - --accesslog
      - --log
      - --api
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `${TRAEFIK_CONSTRAINT_TAG?Variable not set}`)
      - --providers.docker.exposedbydefault=false
      # - --providers.docker.swarmmode
      - --entrypoints.web.address=:80
      # - --entrypoints.websecure.address=:443
      # - --certificatesresolvers.sslcerts.acme.httpchallenge=true
      # - --certificatesresolvers.sslcerts.acme.httpchallenge.entrypoint=web
      # - --certificatesresolvers.sslcerts.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      # - --certificatesresolvers.sslcerts.acme.email=${FIRST_SUPERUSER?Certificate resolver requires a valid email}
      # - --certificatesresolvers.sslcerts.acme.storage=/certs/acme.json
    labels:
      - traefik.enable=true
      - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - traefik.constraint-label=${TRAEFIK_CONSTRAINT_TAG?Variable not set}
      # - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.scheme=https
      # - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.permanent=true
      - traefik.http.services.traefik-public.loadbalancer.server.port=80
      - traefik.http.routers.traefik-public.rule=PathPrefix(`/`)
      - traefik.http.routers.traefik-public.entrypoints=web
      # # Handle host with and without "www" to redirect to only one of them
      # # Uses environment variable DOMAIN
      # # To disable www redirection remove the Host() you want to discard, here and
      # # below for HTTPS
      # - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
      # - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.entrypoints=http
      # # traefik-https the actual router using HTTPS
      # - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
      # - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.entrypoints=https
      # - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.tls=true
      # # Use the "le" (Let's Encrypt) resolver created below
      # - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.tls.certresolver=le
      # # Define the port inside of the Docker service to use
      # - traefik.http.services.${STACK_NAME?Variable not set}-proxy.loadbalancer.server.port=80
      # # Handle domain with and without "www" to redirect to only one
      # # To disable www redirection remove the next line
      # - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.regex=^https?://(www.)?(${DOMAIN?Variable not set})/(.*)
      # # Redirect a domain with www to non-www
      # # To disable it remove the next line
      # - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.replacement=https://${DOMAIN?Variable not set}/$${3}
      # # Redirect a domain without www to www
      # # To enable it remove the previous line and uncomment the next
      # # - traefik.http.middlewares.${STACK_NAME}-www-redirect.redirectregex.replacement=https://www.${DOMAIN}/$${3}
      # # Middleware to redirect www, to disable it remove the next line
      # - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.middlewares=${STACK_NAME?Variable not set}-www-redirect
      # # Middleware to redirect www, and redirect HTTP to HTTPS
      # # to disable www redirection remove the section: ${STACK_NAME?Variable not set}-www-redirect,
      # - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.middlewares=${STACK_NAME?Variable not set}-www-redirect,${STACK_NAME?Variable not set}-https-redirect

  whoami:
    image: emilevauge/whoami
    env_file: .env
    ports:
      - "8989:80"
    labels:
      - traefik.enable=true
      - traefik.constraint-label=${TRAEFIK_CONSTRAINT_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-whoami.rule=Host(`whoami.${DOMAIN?Variable not set}`)

  adminer:
    image: adminer
    restart: always
    ports:
      - 8181:8080

  db:
    image: mariadb:10
    env_file: .env
    ports:
      - "3306:3306"
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    restart: "unless-stopped"
    environment:
      - MYSQL_HOST=${DATABASE_SERVER}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DATABASE_NAME}
      - MYSQL_USER=${DATABASE_USER}
      - MYSQL_PASSWORD=${DATABASE_PASSWORD}
      - MYSQL_DB_NAME=${DATABASE_NAME}
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
      timeout: 10s
      retries: 5
    volumes:
      - ./config/sql/privileges.sql:/docker-entrypoint-initdb.d/1.sql
      - app_db_data:/var/lib/mysql

  # queue:
  #   image: rabbitmq:3
  #   # Using the below image instead is required to enable the "Broker" tab in the flower UI:
  #   # image: rabbitmq:3-management
  #   #
  #   # You also have to change the flower command

  cache:
    image: redis:7
    ports:
      - "6379:6379"

  flower:
    image: mher/flower:0.9.7
    depends_on:
      - cache
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=
      - FLOWER_PORT=5555
    command:
      - "--broker=${REDIS_CONN_URI?Variable not set}/0"
      # - "--broker=amqp://guest@queue:5672//"
      # For the "Broker" tab to work in the flower UI, uncomment the following command argument,
      # and change the queue service's image as well
      # - "--broker_api=http://guest:guest@queue:15672/api//"
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
        - traefik.constraint-label=${TRAEFIK_CONSTRAINT_TAG?Variable not set}
        - traefik.http.routers.${STACK_NAME?Variable not set}-flower-http.rule=Host(`flower.${DOMAIN?Variable not set}`)
        - traefik.http.routers.${STACK_NAME?Variable not set}-flower-http.entrypoints=http
        - traefik.http.routers.${STACK_NAME?Variable not set}-flower-http.middlewares=${STACK_NAME?Variable not set}-https-redirect
        # - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.rule=Host(`flower.${DOMAIN?Variable not set}`)
        # - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.entrypoints=https
        # - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.tls=true
        # - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.tls.certresolver=le
        - traefik.http.services.${STACK_NAME?Variable not set}-flower.loadbalancer.server.port=5555

  worker:
    image: '${DOCKER_IMAGE_PREFIX}/worker:${TAG-latest}'
    depends_on:
      - db
      - cache
    env_file:
      - .env
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      # Allow explicit env var override for tests
      - SMTP_HOST=${SMTP_HOST?Variable not set}
    build:
      context: ./backend
      dockerfile: worker.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}

  backend:
    image: '${DOCKER_IMAGE_PREFIX}/backend:${TAG-latest}'
    env_file: .env
    ports:
      - "8888:8888"
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    restart: "on-failure"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SMTP_HOST=${SMTP_HOST}
      - CELERY_WORKER_BROKER=${CELERY_WORKER_BROKER}
      - CELERY_WORKER_BACKEND=${CELERY_WORKER_BACKEND}
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
    labels:
      - traefik.enable=true
      - traefik.constraint-label=${TRAEFIK_CONSTRAINT_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
      # - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.tls.certresolver=sslcerts

  frontend:
    image: '${DOCKER_IMAGE_PREFIX}/frontend:${TAG-latest}'
    env_file: .env
    ports:
      - "3333:3000"
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    depends_on:
      - db
      - backend
    build:
      context: ./frontend
      dockerfile: frontend.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
    labels:
      - traefik.enable=true
      - traefik.constraint-label=${TRAEFIK_CONSTRAINT_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=Host(`${DOMAIN?Variable not set}`)
      # - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.tls.certresolver=sslcerts

volumes:
  app_db_data:
    driver: local

networks:
  traffic_public:
    external: ${TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL-false}
